package exploiter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ExploiterDaoImpl implements ExploiterDao {

	@Override
	public List<Exploiter> select(Connection conn) throws SQLException {

		List<Exploiter> list = new ArrayList<>();
		Statement stmt = null;
		ResultSet rs = null;

		try {
			stmt = conn.createStatement();

			String sql = "select * from exploiter";

			rs = stmt.executeQuery(sql);

			while (rs.next()) {
				list.add(rowToExploiter(rs));
			}

		} finally {
			if (rs != null) {
				rs.close();
			}
			if (stmt != null) {
				stmt.close();
			}
		}

		return list;
	}

	@Override
	public Exploiter researchById(Connection conn, String id) throws SQLException {

		Exploiter exploiter = null;

		String sql = "select * from exploiter where id = ?";

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);

			rs = pstmt.executeQuery();

			if (rs.next()) {
				exploiter = rowToExploiter(rs);
			}

		} finally {
			if (rs != null) {
				rs.close();
			}
			if (pstmt != null) {
				pstmt.close();
			}
		}

		return exploiter;
	}

	@Override
	public int insert(Connection conn, Exploiter exploiter) throws SQLException {
		
		int result = 0;

		PreparedStatement pstmt = null;


		String sql = "insert into exploiter values (EXPLOITER_INDEX.NEXTVAL, ?, ?, ?, ?, ?)";

		try {

			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, exploiter.getId());
			pstmt.setString(2, exploiter.getPassword());
			pstmt.setString(3, exploiter.getNickname());
			pstmt.setInt(4, exploiter.getAdmin());
			pstmt.setString(5, exploiter.getSalt());

			result = pstmt.executeUpdate();
		} finally {
			if (pstmt != null) {
				pstmt.close();
			}
		}

		return result;
	}

	@Override
	public int update(Connection conn, Exploiter exploiter, String targetId) throws SQLException {
		int result = 0;
		PreparedStatement pstmt = null;

		String sql = "update exploiter set id=?, password=?, nickname=?, admin=?, salt=? where id=?";

		try {
			pstmt = conn.prepareStatement(sql);

			pstmt.setString(1, exploiter.getId());
			pstmt.setString(2, exploiter.getPassword());
			pstmt.setString(3, exploiter.getNickname());
			pstmt.setInt(4, exploiter.getAdmin());
			pstmt.setString(5, exploiter.getSalt());
			pstmt.setString(6, targetId);

			result = pstmt.executeUpdate();
		} finally {
			if (pstmt != null) {
				pstmt.close();
			}
		}

		return result;
	}

	@Override
	public int delete(Connection conn, Exploiter exploiter) throws SQLException {
		int result = 0;

		String sql1 = "delete from rank where exploiternum=?";
		String sql2 = "delete from exploiter where id=?";
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;

		try {
			
			pstmt1 = conn.prepareStatement(sql1);
			pstmt1.setInt(1, exploiter.getUsernum());
			
			pstmt2 = conn.prepareStatement(sql2);
			pstmt2.setString(1, exploiter.getId());

			result = pstmt1.executeUpdate();
			result = pstmt2.executeUpdate();

		} finally {
			if (pstmt2 != null) {
				pstmt2.close();
			}
		}

		return result;

	}

	private Exploiter rowToExploiter(ResultSet rs) throws SQLException {

		return new Exploiter(rs.getInt("exploiternum"), rs.getString("id"), rs.getString("password"),
				rs.getString("nickname"), rs.getInt("admin"), rs.getString("salt"));

	}

}
